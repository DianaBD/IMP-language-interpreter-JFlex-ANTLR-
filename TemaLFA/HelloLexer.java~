/* The following code was generated by JFlex 1.4.3 on 12/29/18 1:16 AM */

import java.util.*;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/29/18 1:16 AM from the specification file
 * <tt>Hello.flex</tt>
 */
class HelloLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SAVEWHILEBLOCK = 8;
  public static final int STMT = 6;
  public static final int LIST = 4;
  public static final int PROG = 2;
  public static final int TEST = 10;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\5\2\0\1\4\22\0\1\3\1\27\4\0\1\33"+
    "\1\0\1\1\1\2\1\0\1\31\1\24\2\0\1\32\1\6\1\6"+
    "\1\6\1\6\1\6\1\6\1\6\1\6\1\6\1\6\1\0\1\25"+
    "\1\0\1\26\1\30\42\0\1\7\1\10\1\10\1\10\1\11\1\12"+
    "\1\10\1\13\1\14\1\10\1\10\1\15\1\10\1\16\1\10\1\10"+
    "\1\10\1\17\1\20\1\21\1\22\1\10\1\23\1\10\1\10\1\10"+
    "\1\34\1\0\1\35\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\0\5\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\2\6\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\3\1\17\1\20\3\0\5\10\1\21"+
    "\1\22\2\10\1\23\3\10\1\24\2\10\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[51];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\360\0\u010e\0\226\0\u012c\0\226\0\226\0\226\0\u014a"+
    "\0\u0168\0\u0186\0\u01a4\0\u01c2\0\u01e0\0\u01fe\0\226\0\226"+
    "\0\226\0\226\0\226\0\226\0\u021c\0\226\0\226\0\u023a"+
    "\0\360\0\u010e\0\u0258\0\u0276\0\u0294\0\u02b2\0\u02d0\0\226"+
    "\0\226\0\u02ee\0\u030c\0\226\0\u032a\0\u0348\0\u0366\0\u0168"+
    "\0\u0384\0\u03a2\0\226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[51];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\4\6\1\7\7\6\1\10\25\6\1\7\2\6\15\11"+
    "\1\12\1\13\14\6\1\7\2\6\15\14\1\6\1\15"+
    "\11\6\1\16\1\17\1\6\1\7\1\6\1\20\2\21"+
    "\1\22\1\23\1\21\1\24\4\21\1\25\1\21\1\26"+
    "\1\6\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\5\6\1\0\30\6\43\0\1\6\46\0"+
    "\1\40\26\0\15\41\1\42\1\13\13\0\1\41\41\0"+
    "\15\14\20\0\1\20\36\0\15\21\21\0\6\21\1\43"+
    "\6\21\21\0\1\44\14\21\21\0\3\21\1\45\11\21"+
    "\21\0\10\21\1\46\4\21\21\0\4\21\1\47\10\21"+
    "\45\0\1\50\23\0\1\51\23\0\11\21\1\52\3\21"+
    "\21\0\6\21\1\53\6\21\15\0\1\54\3\0\15\21"+
    "\21\0\13\21\1\55\1\21\21\0\5\21\1\56\7\21"+
    "\21\0\2\21\1\57\12\21\21\0\11\21\1\55\3\21"+
    "\21\0\2\21\1\60\12\21\21\0\6\21\1\61\6\21"+
    "\15\0\1\6\3\0\15\21\21\0\2\21\1\62\12\21"+
    "\15\0\1\63\3\0\15\21\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\0\1\11\4\1\1\11\1\1\3\11"+
    "\7\1\6\11\1\1\2\11\3\0\5\1\2\11\2\1"+
    "\1\11\6\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[51];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int insideLogicPar = 0;

    MainNode root = null;

    // pt valorile variabilelor
    public HashMap<String,Integer> identifiersTable = new HashMap<String,Integer>();

    // pt lista initiala de variabile
    public LinkedList<String> variables = new LinkedList<>();

  	Stack<Expression> old_stack = new Stack<>();
    Stack<Expression> stack = new Stack<>();

  	Expression get_nth_element_from_stack(int element_number) {
        Stack<Expression> temp_stack = new Stack<>();

        if (element_number > stack.size()) {
            return null;
        }

        for (int j = 0; j < element_number; ++j) {
            temp_stack.push(stack.pop());
        }

        Expression res = temp_stack.peek();

        for (int j = 0; j < element_number; ++j) {
            stack.push(temp_stack.pop());
        }
        return res;
    }

    Stack<Expression> reverseElemsUntilSymbol(Stack<Expression> stack, String symbol){
        ArrayList<Expression> temp = new ArrayList<>();

        while (!(stack.peek().symbol.equals(symbol))) {
            temp.add((Expression)stack.pop());
        }

        for(int i = 0; i < temp.size(); i++)
            stack.push(temp.get(i));

        return stack;
    }


    Stack<Expression> doAllPlus(Stack<Expression> stack){
        Stack<Expression> temp = new Stack<>();
        while (!(stack.peek().symbol.equals("=")) && !(stack.peek().symbol.equals("("))) {
            if(stack.peek().symbol.equals("+")){
                Expression e1, e2;

                e1 = temp.pop();
                stack.pop(); // scot /
                e2 = stack.pop();

                stack.push(new Plus(e1,e2, ""));
            }
            else {
                temp.push(stack.pop());
            }
        }
        while (!(temp.isEmpty())){
            stack.push(temp.pop());
        }
        return stack;
    }

    Stack<Expression> doAllDivs(Stack<Expression> stack) {
        Stack<Expression> temp = new Stack<>();
        while (!(stack.peek().symbol.equals("=")) && !(stack.peek().symbol.equals("("))) {
            if(stack.peek().symbol.equals("/")){
                Expression e1, e2;

                e1 = temp.pop();
                stack.pop();// scot /
                e2 = stack.pop();

                stack.push(new Div(e1,e2, "" ));
            }
            else {
                temp.push(stack.pop());
            }
        }
        while (!(temp.isEmpty())){
            stack.push(temp.pop());
        }
        return stack;
    }

    Stack<Expression> doAllGreater(Stack<Expression> stack) {
        Stack<Expression> temp = new Stack<>();
        while (!(stack.peek().symbol.equals("("))) {
            if(stack.peek().symbol.equals(">")){

                Expression e1, e2;
                e1 = temp.pop();
                stack.pop(); // scot /
                e2 = stack.pop();

                stack.push(new Greater(e1,e2, "" ));
            }
            else {
                temp.push(stack.pop());
            }
        }
        while (!(temp.isEmpty())){
            stack.push(temp.pop());
        }
        return stack;
    }

    Stack<Expression> doAllNot(Stack<Expression> stack) {
        Stack<Expression> temp = new Stack<>();
        while (!(stack.peek().symbol.equals("("))) {
            if(stack.peek().symbol.equals("!")){
                Expression e;

                stack.pop();
                e = stack.pop();
                stack.push(new Not(e));
            }
            else {
                temp.push(stack.pop());
            }
        }
        while (!(temp.isEmpty())){
            stack.push(temp.pop());
        }
        return stack;
    }

    Stack<Expression> doAllAnd(Stack<Expression> stack) {
        Stack<Expression> temp = new Stack<>();
        while (!(stack.peek().symbol.equals("("))) {
            if(stack.peek().symbol.equals("&&")){
                Expression e1, e2;

                e1 = temp.pop();
                stack.pop();
                e2 = stack.pop();

                stack.push(new And(e1,e2, ""));
            }
            else {
                temp.push(stack.pop());
            }
        }
        while (!(temp.isEmpty())){
            stack.push(temp.pop());
        }
        return stack;
    }

    void doAritmPar() {
        stack = reverseElemsUntilSymbol(stack,"(");
        stack = doAllDivs(stack);
        stack = doAllPlus(stack);

        Expression e = null;
        e = stack.pop();
        stack.pop(); // scot (
       
        stack.push(new AritmPar(e, ""));
    }

    void doLogicPar() {
        stack = reverseElemsUntilSymbol(stack,"(");
        stack = doAllDivs(stack);
        stack = doAllPlus(stack);
        stack = doAllGreater(stack);
        stack = doAllNot(stack);
        stack = doAllAnd(stack);

        Expression e = stack.pop();
        stack.pop();

        stack.push(new LogicPar(e, ""));
    }

    Expression coolAssignment() {
        stack = reverseElemsUntilSymbol(stack,"=");
        stack = doAllDivs(stack);
        stack = doAllPlus(stack);
        
        Variable v = null;
        Expression e = null;
        
        e = stack.pop();
        stack.pop(); // scot =
        v = (Variable)stack.pop();

        StmtList old_st = null;
        int main = 0;
        int block = 0;
        if(stack.peek() instanceof MainNode){
            old_st = (MainNode)stack.pop();
            main = 1;
        } else {
            old_st = (Block)stack.pop();
            block = 1;
        }

        String offset = "";
        if(old_st.elems.size() > 0){
             offset = old_st.offset + "\t";
        }
        
        LinkedList<Expression> new_ls = new LinkedList<>();
        new_ls.add(new Assign(v,e,root, offset));

        StmtList st = null;
        if(main == 1) 
            st = new SequenceNode(new_ls, old_st.offset);
        if(block == 1)
            st = new StmtList(new_ls, old_st.offset);
        st.offset = offset;

        old_st.elems.add(st);
        if(main == 1){
            return new MainNode(old_st.elems, ((MainNode)old_st).idTable, offset, ((MainNode)old_st).error_unassigned_var, ((MainNode)old_st).error_div_by_zero);
        }
        if(block == 1)
            return new Block(old_st.elems, offset);

        return null;
    }

    String lookBackToFindOutWhatToDo(Stack<Expression> stack) {
        
        if(stack.peek() instanceof Block){
            if(get_nth_element_from_stack(2) instanceof Block){
                if(get_nth_element_from_stack(3) instanceof LogicPar){
                    if(get_nth_element_from_stack(4) instanceof IfBlock)
                        return "if";
                }
            }
        }

        if(get_nth_element_from_stack(1) instanceof Block){
            if(get_nth_element_from_stack(2) instanceof LogicPar){
                if(get_nth_element_from_stack(3) instanceof WhileBlock){
                    return "while";
                }
                    
            }
        }
        
        return "";
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  HelloLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  HelloLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { LinkedList<Expression> ls = new LinkedList<>();
        stack.push(new Block(ls, ""));
          }
        case 22: break;
        case 21: 
          { LinkedList<Expression> ls = new LinkedList<>();
        stack.push(new WhileBlock(ls,""));
          }
        case 23: break;
        case 2: 
          { stack.push(new Number(yytext(), yyline, root));
          }
        case 24: break;
        case 13: 
          { stack.push(new Symbol("+"));
          }
        case 25: break;
        case 9: 
          { Expression x = coolAssignment(); // scot ce am pe stiva pana dau de "(" si formez elementul
        stack.push(x); // pun elementul nou format la loc pe stiva
          }
        case 26: break;
        case 1: 
          { identifiersTable.put(yytext(), null);
          }
        case 27: break;
        case 10: 
          { stack.push(new Symbol("="));
          }
        case 28: break;
        case 6: 
          { stack.push(new Symbol("("));
          }
        case 29: break;
        case 8: 
          { if(!identifiersTable.containsKey(yytext())){
            ((MainNode)stack.get(0)).error_unassigned_var = yyline + 1;
        }
        stack.push(new Variable(yytext(),yyline, root));
          }
        case 30: break;
        case 19: 
          { LinkedList<Expression> ls = new LinkedList<>();
        stack.push(new IfBlock(ls,""));
          }
        case 31: break;
        case 4: 
          { yypushback(yylength());
        yybegin(LIST);
          }
        case 32: break;
        case 14: 
          { stack.push(new Symbol("/"));
          }
        case 33: break;
        case 20: 
          { stack.push(new Boolean(yytext())); 
                  insideLogicPar = 1;
          }
        case 34: break;
        case 16: 
          { if (lookBackToFindOutWhatToDo(stack).equals("if")) {
            Block ebl = (Block)stack.pop();
            Block ibl = (Block)stack.pop();
            LogicPar cond = (LogicPar)stack.pop();

            IfBlock ifbl = (IfBlock)stack.pop();

            ifbl.elems.add(cond);
            ifbl.elems.add(ibl);
            ifbl.elems.add(ebl);

            StmtList old_st;
            int main = 0;
            if(stack.peek() instanceof MainNode){
                old_st = (MainNode)stack.pop();
                main = 1;
            } 
            else
                old_st = (Block)stack.pop();

            String offset = "";
            if(old_st.elems.size() > 0){
                 offset = old_st.offset + "\t";
            }

            LinkedList<Expression> new_ls = new LinkedList<>();
            new_ls.add(ifbl);
            StmtList st = new StmtList(new_ls, old_st.offset);
            st.offset = offset;

            //if_conditions_stack.pop();

            old_st.elems.add(st);
            if(main == 1)
                stack.push(new MainNode(old_st.elems, ((MainNode)old_st).idTable, offset, ((MainNode)old_st).error_unassigned_var, ((MainNode)old_st).error_div_by_zero));
            else
                stack.push(new Block(old_st.elems, offset));
        }
        else {
            if (lookBackToFindOutWhatToDo(stack).equals("while")) {
                Block bl = (Block)stack.pop();
                LogicPar cond = (LogicPar)stack.pop();

                WhileBlock wbl = (WhileBlock)stack.pop();

                wbl.elems.add(cond);
                wbl.elems.add(bl);

                StmtList old_st;
                int main = 0;
                if(stack.peek() instanceof MainNode){
                    old_st = (MainNode)stack.pop();
                    main = 1;
                } 
                else
                    old_st = (Block)stack.pop();

                String offset = "";
                if(old_st.elems.size() > 0){
                     offset = old_st.offset + "\t";
                }

                LinkedList<Expression> new_ls = new LinkedList<>();
                new_ls.add(wbl);
                StmtList st = new StmtList(new_ls, old_st.offset);
                st.offset = offset;

                old_st.elems.add(st);
                if(main == 1)
                    stack.push(new MainNode(old_st.elems, ((MainNode)old_st).idTable, offset, ((MainNode)old_st).error_unassigned_var, ((MainNode)old_st).error_div_by_zero));
                else
                    stack.push(new Block(old_st.elems,offset));
            }
        }
          }
        case 35: break;
        case 7: 
          { int i = 2;
        while( !(get_nth_element_from_stack(i) instanceof IfBlock) && !(get_nth_element_from_stack(i) instanceof WhileBlock) && !(get_nth_element_from_stack(i).symbol.equals("="))) {
            Expression e = get_nth_element_from_stack(i);
            if (e.symbol.equals("!") || e.symbol.equals(">") || e.symbol.equals("&&"))
                insideLogicPar = 1;
            i++;
        }

        if(insideLogicPar == 1){
            doLogicPar();
            insideLogicPar = 0;
        }
        else {
            doAritmPar();
        }
          }
        case 36: break;
        case 18: 
          { yypushback(yylength());
        yybegin(PROG);
          }
        case 37: break;
        case 12: 
          { stack.push(new Symbol(">"));
          }
        case 38: break;
        case 17: 
          { stack.push(new Symbol("&&"));
          }
        case 39: break;
        case 11: 
          { stack.push(new Symbol("!"));
          }
        case 40: break;
        case 5: 
          { LinkedList<Expression> ls = new LinkedList<>();
        root = new MainNode(ls,identifiersTable,"", 0, 0);
        stack.push(root);
        yybegin(STMT);
          }
        case 41: break;
        case 3: 
          { 
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
